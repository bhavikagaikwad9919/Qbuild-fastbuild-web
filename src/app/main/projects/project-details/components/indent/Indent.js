
import React, { useState, useEffect } from "react";
import { makeStyles } from "@material-ui/core/styles";
import { Fab, Icon, Button, Paper, CircularProgress, Backdrop, Typography } from "@material-ui/core";
import FuseAnimate from "@fuse/core/FuseAnimate";
import FuseLoading from "@fuse/core/FuseLoading";
import { useDispatch, useSelector } from "react-redux";
import ReactTable from "react-table-6";
import {
  openNewDialog,
  openEditDialog,
  listIndent,
  detailIndent
} from "app/main/projects/store/projectsSlice";
import { dispatchWarningMessage } from "app/utils/MessageDispatcher";
import moment from 'moment';
import IndentDialog from "./IndentDialog";

const useStyles = makeStyles((theme) => ({
  addButton: {
    position: "fixed",
    right: 40,
    bottom: 5,
    zIndex: 99,
  },
  root: {
    maxHeight: "68vh",
  },
  backdrop: {
    zIndex: theme.zIndex.drawer + 3,
    color: "#fff",
  },
  table: {
    minWidth: 500,
  },
}));

function Indent(props) {
  const classes = useStyles(props);
  const dispatch = useDispatch();
  const indent = useSelector(({ projects }) => projects.indent.indentList);
  const pendingIntentsCount = useSelector(({ projects }) => projects.indent.pendingIntentsCount);
  const projectId = useSelector(({ projects }) => projects.details._id);
  const loading = useSelector(({ projects }) => projects.loading);
  const role = useSelector(({ auth }) => auth.user);
  const team = useSelector(({ projects }) => projects.details.team);
  // const [createAccess, setCreateAccess] = useState();

  
console.log("pendingIntentsCount333",pendingIntentsCount)
  useEffect(() => {
    dispatch(listIndent({projectId:projectId,page:1,limit:50}))
      .then((response) => {
        console.log(response); 
        console.log(response.payload.pendingIntentsCount,"pendingIntentsCount0000")
      })
      .catch((error) => {
        console.error(error); 
      });
  }, [dispatch, projectId]);
  

  // useEffect(() => {
  //   team.forEach((t) => {
  //     if ((t._id === role.data.id && t.role === "owner") || role.role === 'admin') {
  //       setCreateAccess(true);
  //     } else if (t._id === role.data.id && t.role !== "owner") {
  //       setCreateAccess(t.tab_access.includes("Indent") || t.tab_access.includes("Create/Update Indent"));

  //     }
  //   });
  // }, [role.data.id, role.role, team]);
  

  const openDialog = async (data) => {
    try {
      const response = await dispatch(detailIndent({ indentId: data._id }));
      console.log("Detail Indent Response:", response);
      dispatch(openEditDialog(data));
    } catch (error) {
      console.error("Detail Indent Error:", error);
    }
  };


  // const openDialog = async (data) => {
  //   await dispatch(detailIndent({ indentId:data._id }))
  //     .then((response) => {
  //       console.log("Detail Indent Response:", response);
  //     })
  //     .catch((error) => {
  //       console.error("Detail Indent Error:", error);
  //     });
  //   dispatch(openEditDialog(data));
  // }

  if (!indent) {
    return <FuseLoading />;
  }

  const formatDate = (date) => moment(date).format("DD/MM/YYYY");

  return (
    <React.Fragment>
      <Paper className="w-full rounded-8 shadow-1">
        <div className="flex items-center justify-between px-16 h-64 border-b-1">
          <Typography className="text-16 font-bold">Indent</Typography>
          <Button color="primary" onClick={() => dispatch(openNewDialog())} variant="contained" className="mb-8" style={{ padding: '3px 16px' }} nowrap="true">
              Add Indent
            </Button>
          {/* {createAccess &&} */}
        </div>
        <FuseAnimate animation="transition.slideUpIn" delay={100}>
          <ReactTable
            className={classes.root}
            data={indent}
            columns={[
              {
                Header: "Indent No",
                accessor: "unique_autogenerated_intent_no",
                filterable: true,
                Cell: ({ row }) => (
                  <a
                    className="cursor-pointer text-wrap"
                    onClick={
                       () => {
                      openDialog(row._original)}}

                    // className="cursor-pointer text-wrap"
                    // onClick={
                    //   createAccess ? () => {
                    //   openDialog(row._original)
                    // } : () => dispatchWarningMessage(dispatch, "You don't have access to view or update indent.")}
                    
                  >
                    {row.unique_autogenerated_intent_no}
                  
                  </a>
                ),
                className: "font-bold",
              },
              {
                Header: "Inventory",
                accessor: "inventory_name",
                filterable: true,
              },
              {
                Header: "Unit",
                accessor: "unit",
                filterable: true,
              },
              {
                Header: "Quantity",
                accessor: "quantity",
                filterable: true,
              },
              {
                Header: "Purpose",
                accessor: "purpose",
                filterable: true,
              },
              {
                Header: "Required Date",
                accessor: "required_date",
                filterable: true,
                Cell: ({ row }) => formatDate(row.required_date),
              },
              {
                Header: "Status",
                accessor: "status",
                filterable: true,
                Cell: ({ row }) => (
                  <span
                    className={
                      row.status === "New"
                        ? "bg-blue-700 text-white inline p-4 rounded truncate"
                        : row.status === "Pending"
                        ? "bg-red-700 text-white inline p-4 rounded truncate"
                        : "bg-purple-700 text-white inline p-4 rounded truncate"
                    }
                  >
                    {row.status}
                  </span>
                ),
              },
              
              {
                Header: "Created By",
                accessor: "created_by.name",
                filterable: true,
              }
            ]}
            defaultPageSize={10}
            noDataText="No Indent Found"
          />
        </FuseAnimate>
        <Backdrop className={classes.backdrop} open={loading}>
          <CircularProgress color="inherit" />
        </Backdrop>

        <FuseAnimate animation="transition.expandIn" delay={300}>
          <Fab
            color="primary"
            aria-label="add"
            className={classes.addButton}
           // disabled={createAccess === true ? false : true}
            onClick={() => {
              dispatch(openNewDialog())
            }}
          >
            <Icon>add</Icon>
          </Fab>
        </FuseAnimate>
      </Paper>
      <IndentDialog />
    </React.Fragment>
  );
}

export default Indent;